version: '3.9'

services:
  # FastAPI Application - Development Mode
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: fastapi-auth-app-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "5678:5678"  # Python debugger port
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://auth_user:auth_password@postgres:5432/auth_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-not-for-production
      - AUTH0_DOMAIN=${AUTH0_DOMAIN:-}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID:-}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET:-}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE:-}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./app:/app/app:delegated  # Mount app directory for hot reload
      - ./tests:/app/tests:delegated
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./poetry.lock:/app/poetry.lock:ro
      - ./.env:/app/.env:ro  # Mount .env file if exists
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth-network-dev
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]

  # PostgreSQL Database - Development
  postgres:
    image: postgres:16-alpine
    container_name: fastapi-auth-postgres-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_password
      - POSTGRES_DB=auth_db
      - POSTGRES_HOST_AUTH_METHOD=trust  # Less secure, but convenient for dev
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro  # Optional: init scripts
    networks:
      - auth-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache - Development
  redis:
    image: redis:7-alpine
    container_name: fastapi-auth-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --loglevel debug  # No password for dev
    volumes:
      - redis_data_dev:/data
    networks:
      - auth-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # pgAdmin - Always included in dev
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fastapi-auth-pgadmin-dev
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=dev@example.com
      - PGADMIN_DEFAULT_PASSWORD=dev_password
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
      - ./scripts/pgadmin-servers.json:/pgadmin4/servers.json:ro  # Optional: pre-configured servers
    networks:
      - auth-network-dev
    depends_on:
      - postgres

  # Redis Commander - Redis GUI for development
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fastapi-auth-redis-commander-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - auth-network-dev
    depends_on:
      - redis

  # Mailhog - Email testing for development
  mailhog:
    image: mailhog/mailhog:latest
    container_name: fastapi-auth-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - auth-network-dev

networks:
  auth-network-dev:
    driver: bridge
    name: fastapi-auth-network-dev

volumes:
  postgres_data_dev:
    name: fastapi-auth-postgres-data-dev
  redis_data_dev:
    name: fastapi-auth-redis-data-dev
  pgadmin_data_dev:
    name: fastapi-auth-pgadmin-data-dev
